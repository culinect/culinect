rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow read access to all documents for authenticated users
    match /{document=**} {
      allow read: if request.auth != null;
    }

    // Conversations collection rules
    match /conversations/{conversationId} {
      // Allow read access if the user is a participant in the conversation
      allow read: if request.auth != null && request.auth.uid in resource.data.participants;
      
      // Allow write access if the user is authenticated (for creating new conversations)
      allow write: if request.auth != null;

      // Messages subcollection rules
      match /messages/{messageId} {
        // Allow read and write access if the user is authenticated and a participant in the conversation
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }

    // Users collection rules
    match /users/{userId} {
      // Allow a user to create their own document, and read/update/delete their own document
      allow create, read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Allow read access to other users' documents
      allow read: if request.auth != null;

      // Subcollection rules
      match /followers/{followerId} {
        // Allow a user to create/read/update/delete their own subcollections
        allow create, read, update, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      match /following/{followingId} {
        allow create, read, update, delete: if request.auth != null && request.auth.uid == userId;
      }
      
      match /resume/{resumeId} {
        allow create, read, update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Posts collection rules
    match /posts/{postId} {
      // Allow authenticated users to create a post
      allow create: if request.auth != null;

      // Allow anyone to read posts
      allow read;

      // Allow updates and deletes only by the post author
      allow update, delete: if request.auth.uid == resource.data.author.userId;

      // Subcollection rules
      match /likes/{userId} {
        // Allow a user to like/unlike a post or add/delete a comment
        allow create, delete: if request.auth != null;
        allow read: if request.auth != null;
      }
      
      match /comments/{commentId} {
        allow create, delete: if request.auth != null;
        allow read: if request.auth != null;
      }
    }

    // Jobs collection rules
    match /jobs/{jobId} {
      // Allow anyone to create a document, and the creator to read/update/delete their own documents
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.resource.data.createdBy == /databases/$(database)/documents/users/$(request.auth.uid);
    }

    // Recipes collection rules
    match /recipes/{recipeId} {
      // Allow authenticated users to create a post
      allow create: if request.auth != null;

      // Allow anyone to read posts
      allow read;

      // Allow updates and deletes only by the post author
      allow update, delete: if request.auth.uid == resource.data.author.userId;
    }

    // Hotels collection rules
    match /hotels/{hotelId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.resource.data.addedBy == /databases/$(database)/documents/users/$(request.auth.uid);
    }

    // Blogs collection rules
    match /blogs/{blogId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.resource.data.author == /databases/$(database)/documents/users/$(request.auth.uid);
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.resource.data.author == /databases/$(database)/documents/users/$(request.auth.uid);
    }

    // Messages collection rules
    match /messages/{chatId} {
      // Allow a user to create a chat or send a message if they are part of the chat members
      allow create: if request.auth != null && request.resource.data.members.hasAny([request.auth.uid]);
      
      match /messages/{messageId} {
        allow create: if request.auth != null && get(/databases/$(database)/documents/messages/$(chatId)).data.members.hasAny([request.auth.uid]);
        allow read: if request.auth != null && get(/databases/$(database)/documents/messages/$(chatId)).data.members.hasAny([request.auth.uid]);
      }
    }

    // Usernames collection rules
    match /usernames/{username} {
      // Allow anyone to check for username availability (read)
      allow read;
      // Allow authenticated users to create a new username (write)
      allow write: if request.auth != null;
    }

    // Emails collection rules
    match /emails/{email} {
      // Allow anyone to check for email availability (read)
      allow read;
      // Allow authenticated users to create a new email (write)
      allow write: if request.auth != null;
    }

    // PhoneNumbers collection rules
    match /phoneNumbers/{phoneNumber} {
      // Allow anyone to check for phone number availability (read)
      allow read;
      // Allow authenticated users to create a new phone number (write)
      allow write: if request.auth != null;
    }
  }
}
